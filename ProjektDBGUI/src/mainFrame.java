//Ben√∂tigte Imports
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;


/**
 *
 * @author amaisu14
 */

public class mainFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        //JFrame Komponente initialisieren
        initComponents();
        
        /* 
        JDBC Treiber laden. Erstellt eine Error-Message Dialog 
        und beendet das Programm wenn es kein Treiber gefunden wird
        */
        try {
            Class.forName("com.mysql.jdbc.Driver");
            System.out.println("Driver succesfully loaded");
        } catch (ClassNotFoundException ex) {
            System.out.println("Datenbanktreiber nicht gefunden");
            javax.swing.JOptionPane.showMessageDialog(this , "Datenbanktreiber nicht gefunden","ERROR!", WIDTH);
            System.exit(1);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPort = new javax.swing.JLabel();
        lblServer = new javax.swing.JLabel();
        txtServer = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableResults = new javax.swing.JTable();
        lblTable = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        txtDatabase = new javax.swing.JTextField();
        lblDatabase = new javax.swing.JLabel();
        cmbboxTable = new javax.swing.JComboBox();
        pass = new javax.swing.JPasswordField();
        btnDelete = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblPort.setText("Port:");

        lblServer.setText("Server:");

        txtServer.setText("localhost");
        txtServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServerActionPerformed(evt);
            }
        });

        txtPort.setText("3306");
        txtPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortActionPerformed(evt);
            }
        });

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.setEnabled(false);
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        tableResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableResults);

        lblTable.setText("Table:");

        lblPassword.setText("Password:");

        txtUser.setText("root");
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        lblUser.setText("User:");

        txtDatabase.setText("world");
        txtDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDatabaseActionPerformed(evt);
            }
        });

        lblDatabase.setText("Database:");

        cmbboxTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbboxTableActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPort, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblServer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtServer, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(105, 105, 105))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTable, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(97, 97, 97)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDisconnect)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbboxTable, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblServer, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPort, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTable, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbboxTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete)
                            .addComponent(btnInsert)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServerActionPerformed

    private void txtPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPortActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            /*
            Connection erstellen: Ben√∂tigte Informationen von
            den zugeh√∂rigen TextFields kreigen.
            Erstellt eine Error-Message Dialog und beendet das Programm 
            wenn es ein Fehler eintritt
            */
            con = DriverManager.getConnection("jdbc:mysql://"+txtServer.getText()+":"+txtPort.getText()+"/"+txtDatabase.getText(), txtUser.getText(), pass.getText());
            System.out.println("Connected with Datenbank");
            
            //Wenn verbunden, einige Komponente geh√∂ren als nicht Verf√ºgbar gesetzt werden
            btnConnect.setEnabled(false);
            txtServer.setEnabled(false);
            btnDisconnect.setEnabled(true);
            
            //Combo Box mit Tabellennamen f√ºllen
            fillComboBox();
            
        //Exception fangen
        } catch (SQLException ex) {
            System.out.println("Connection failed");
            javax.swing.JOptionPane.showMessageDialog(this , "Connection Failed","ERROR!", WIDTH);
            System.exit(1);
        }
            
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        try {
            //Combo Box leeren
            cmbboxTable.removeAllItems();
            
            //Verbindung schlie√üen und andere Komponente als nich Verf√ºgbar setzen.
            con.close();
            btnConnect.setEnabled(true);
            txtServer.setEnabled(true);
            btnDisconnect.setEnabled(false);
            
            System.out.println("Connection closed");
          
        //Exception fangen
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Disconnect failed");
        }
        
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserActionPerformed

    private void txtDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDatabaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDatabaseActionPerformed

    
    /*Action Listener f√ºr Combo Box Eintritte*/
    private void cmbboxTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbboxTableActionPerformed
        if(cmbboxTable.getSelectedItem()!=null){
            fillTable();
        }
    }//GEN-LAST:event_cmbboxTableActionPerformed

    /*Action Listener f√ºr Delete Button*/
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //Den zu l√∂schende Zeilennummer speichern
        int row=tableResults.getSelectedRow();
        
        //Wenn es nicht die letzte Zeile ist (sonst Insert)
        if(row!=tableResults.getModel().getRowCount()-1){
            //Wert des Primary Keys speichern (primPos-1 weil Spalten in getValueAt beginnen von 0)
            String id=tableResults.getModel().getValueAt(row, primPos-1).toString();
            try {
                //Preparet statement erstellen
                PreparedStatement delete=con.prepareStatement("delete from "+cmbboxTable.getItemAt(cmbBoxIndex)+ " where "+primary_key+"=?");
                
                //Parameter binden
                delete.setString(1, id);
                delete.executeUpdate();
            

                
                
                //Tabele noch einmal F√ºllen, damit es mit dem DB synchronisiert ist
                fillTable();
                //tableModel.removeRow(row);  (andere M√∂glichkeit)

            //Exception fangen
            } catch (SQLException ex) {
                System.err.println("Konnte nicht Zeile l√∂schen!");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    //Action Listener f√ºr Insert Button
    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        try { 
            //Anzahl der Spalten in der Tabelle
            int num_cols=0;
            //Letzte Zeile
            int lastRow=tableResults.getModel().getRowCount()-1;
            //Spaltennamen kreigen vom Meta-Data und die Tabelle, die im ComboBox selektiert ist
            ResultSet rs =dmd.getColumns(null, null, cmbboxTable.getItemAt(cmbBoxIndex).toString(), null);
            
            /*SQL Statemet erstellen*/
            String sql="INSERT INTO "+cmbboxTable.getItemAt(cmbBoxIndex)+"(";
            
            //Diese Schleife iteriert durch jeder Spalte: 
            //      rs.getString(4) ist Spaltennamme,
            //      num_cols wird auch als index f√ºr die Spalte im JTable verwendet  
            while(rs.next()){
                if(tableResults.getModel().getValueAt(lastRow, num_cols)!=null)
                    sql+=rs.getString(4)+",";
                num_cols++; 
            }
     
            //Der String hat eine Komma zu viel: letzte Character l√∂schen
            sql = sql.substring(0, sql.length() - 1);
            
            //N√§chste Block des Statements
            sql+=") VALUES (";

            //Das Selbe wie vorige Schleife, aber '?' werden im Statement addiert.
            for(int i=0;i<num_cols;i++){
                if(tableResults.getModel().getValueAt(lastRow, i)!=null)
                    sql+="?,";
            }
            //Der String hat eine Komma zu viel: letzte Character l√∂schen
            sql = sql.substring(0, sql.length() - 1);
            sql+=");";

            //SQL-Statement ist Fertig: PreparedStatement erstellen
            PreparedStatement prepInsert=con.prepareStatement(sql);
            
            int fragezeichen=1;
            //Parameter binden
            for(int i=0;i<num_cols;i++){
               if(tableResults.getModel().getValueAt(lastRow, i)!=null){
                    //Erste Parameter der Methode setString soll 1,2,3,4... sein
                    /*Wenn der Primary Key in der Mitte ist kann der Variable 'i'
                    nicht verwendet(1,2,4...), deshalb eine andere Variable 'fragezeichen'*/
                    prepInsert.setString(fragezeichen, ""+tableResults.getModel().getValueAt(lastRow, i));
                    fragezeichen++;
                }
            }
            
            prepInsert.executeUpdate();
            
            //Tabele noch einmal F√ºllen, damit es mit dem DB synchronisiert ist
            fillTable();
            
        //Exception fangen
        } catch (SQLException ex) {
            System.err.println("Konnte nicht Zeile einf√ºgen");
        }
    }//GEN-LAST:event_btnInsertActionPerformed
    
    /*
    F√ºllt den Combo Box mit Tabellennammen
    keine R√ºckgabewert
    */
    private void fillComboBox(){
        try {
            //Tabellennamen von MetaData kriegen
            dmd=con.getMetaData();
            ResultSet r=dmd.getTables(null, null,null,null);
            while(r.next()){
                //Eintritte addieren
                cmbboxTable.addItem(r.getString(3));
            }
        } 
        //Exception fangen
        catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    /*
    F√ºllt den JTable mit Daten von der Tabelle (SELECT)
    F√ºgt auch eine leere Zeile am ende f√ºr die Insert Funktion
    keine R√ºckgabewert
    */
    private void fillTable(){
        try {
                cmbBoxIndex=cmbboxTable.getSelectedIndex();
                dmd=con.getMetaData();
                
                //Spaltennammen von MetaData kriegen
                ResultSet rs =dmd.getColumns(null, null, cmbboxTable.getItemAt(cmbBoxIndex).toString(), null);
                //Primary Keys von MetaData kriegen
                ResultSet primaryKey=dmd.getPrimaryKeys(null, null, cmbboxTable.getItemAt(cmbBoxIndex).toString());
                
                //Meistens gibt es nur eine
                primaryKey.next();
                primPos=primaryKey.getInt("KEY_SEQ"); //position speichern (welche Spalte)
                primary_key=primaryKey.getString(4);  //wert speicern

                //TableModel f√ºr den JTable erstellen(Spalte mit Primary Key nicht editierbar)
                tableModel=new OurTableModel(primPos-1);
                int num_cols=0;
                //Spaltennammen im Model einf√ºgen
                while(rs.next()){
                    tableModel.addColumn(rs.getString(4));
                    num_cols++;
                }
               
                tableResults.setModel(tableModel);

                //Daten mit einem SELECT Statement kriegen
                Statement stm=con.createStatement();
                rs=stm.executeQuery("select * from "+cmbboxTable.getItemAt(cmbBoxIndex));
                while(rs.next()){
                    //F√ºr jede Zeile wird eine Array erstellt
                    Object[] arr= new Object[num_cols];
                    //Array mit Werte f√ºr eine Zeile f√ºllen
                    for(int i=0;i<num_cols;i++){
                        arr[i]=rs.getObject(i+1);
                    }
                    //Die Zeile im Model einf√ºgen
                    tableModel.addRow(arr);
                }

                // Leere Zeile f√ºr Insert
                tableModel.addRow(new Object[num_cols]);
                tableResults.setModel(tableModel);

                //ActionListener f√ºr Update-Funktioin
                tableModel.addTableModelListener(new TableModelListener(){

                    @Override
                    public void tableChanged(TableModelEvent e) {
                        //Update Statement
                        tblChanged(e);
                    }

                });
            //Exception fangen
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    /*
    Wird gerufen wenn eine √Ñnderund in JTable passiert.
    Reagiert auf √Ñnderungen im JTable und f√ºhrt ein UPDATE Statement aus.
    kein R√ºckgabewert
    */
    private void tblChanged(TableModelEvent e){
        //Ge√§nderte Zeile speichern
        int row=e.getFirstRow();
        //Spaltenname von ge√§nderte Zeile
        String columnName=tableResults.getModel().getColumnName(e.getColumn());
        
        if(row!=tableResults.getModel().getRowCount()-1){ //Wenn nicht der letze (sonst insert)
            //Name des Primary Key speichern
            String id=tableResults.getModel().getValueAt(row, primPos-1).toString();
            //Wert des Primary Key speichern
            String value=tableResults.getModel().getValueAt(row,e.getColumn()).toString();

            try {
                //Prepared Statement erstellen : Tabellenname soll nicht als Parameter(?) gegeben werden,
                // weil es dann mit Anf√ºfrungszeichen eingef√ºgt wird (SQL Syntax Error)
                PreparedStatement update=con.prepareStatement("update "+cmbboxTable.getItemAt(cmbBoxIndex).toString()+" set "+columnName+"=? where "+primary_key+"=?");
                // Parameter binden
                update.setString(1, value);
                update.setString(2, ""+id);

                update.executeUpdate();
            
            //Exception fangen
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            /* 
            Look and Feel √§ndern
            Das Programm sieht sch√∂ner aus
            (Nimmt den LookAndFeel vom BetriebSystem)
            */
            
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (InstantiationException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnInsert;
    private javax.swing.JComboBox cmbboxTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDatabase;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblServer;
    private javax.swing.JLabel lblTable;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPasswordField pass;
    private javax.swing.JTable tableResults;
    private javax.swing.JTextField txtDatabase;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtServer;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
    Connection con=null;
    DatabaseMetaData dmd=null;
    OurTableModel tableModel=null;
    
    int primPos; //Postion des Primary Keys
    String primary_key; // Wert des Primary Keys
    int cmbBoxIndex=0; //Index des Selektiertes Eintritt im ComboBox
}
